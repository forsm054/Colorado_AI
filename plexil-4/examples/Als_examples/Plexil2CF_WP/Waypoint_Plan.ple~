/////////////////////////////////////////////////////////////////////////
//
//  README
//
//  Name: Waypoint_Plan.ple
//  By: Alec Forsman - Red Canyon Software
//  Created: 12/29/15
//  Updated: 1/11/16
//
//  Description:
//		This is the main plan for the simulation of an aircraft flying to
//		specified waypoints and performing science operations. This plan
//		will receive commands for which waypoint to fly to and execute the 
//		corresponding subplan.
//
//	Updates:
//		12/29/15
//			- Recreated 
//		1/8/16
//			- Added command logic
//			- Updated conf file
//		1/9/16
//			- Got to run with Fly2A.ple and Fly2A_Simulator.ple
//			- Added B logic and got to run with Fly2WP and its simulator
//			- Got to complete correctly by adding exit condition to Fly2WP
//			- Added logic to set waypoints and made them lookups
//		1/11/16
//			- Got bash script to execute correctly by adding sleeps
//			- Avoided plan using same lookups by passing start location and velocity to the simulator and
//				having the simulator update instead. This way, the start location can still be set
//				in this script.
//			- Above was also done for WP locations
//			- Updated so this script has no Lookups or UpdateLookups. All variables are set in this script and passed
//				to the other scripts
//			- Successfully executes and ends as expected
//			- Added Command node w/ start condition to fix timing issues. (Commands were exectuing too soon)
//			- Update conf file to have no external lookups or lookups
//			- Added Pre and Post conditions where applicable. Can be used for error checks later.
//
//	Issues/ToDo:
//		- Set up to run and communicate with BBB
//		- clean up
//
/////////////////////////////////////////////////////////////////////////

// Lookup Variables
// Commands used to execute plan
Command Fly2A();
Command Fly2B();
Boolean Command UpdateIC(String, Real, Real, Real, Real);
Command UpdateWaypoint(String, Real, Real, Real, String);
// Commands used to communicate with simulators
Command SendMessage (...);
Command UpdateLookup (...);
// Standard plexil commands
Command pprint (...);

WaypointPlan:
{
	// Initial Parameters (Set these here)
	Real velStart = 1;
	Real xStart = 0;
	Real yStart = 0;
	Real zStart = 0;
	Real xWaypoint_A = 10;
	Real yWaypoint_A = 0;
	Real zWaypoint_A = 5;
	Real xWaypoint_B = 10;
	Real yWaypoint_B = 10;
	Real zWaypoint_B = 5;
	Boolean A_Complete;
	Boolean B_Complete;
	ExitCondition A_Complete && B_Complete; // End when plan complete
	
	// Set the starting location of the aircraft 
	Set_Start:
	{
		Boolean StartUpdated;
		PostCondition StartUpdated;
		
		// Sends starting position of aircraft to simulator to update
		UpdateIC("UpdateIC", velStart, xStart, yStart, zStart);
		
		UpdateIC_Return: OnCommand "CommandReturn" (String cmd, Boolean StartUpdated) 
		{
			pprint("The aircraft's starting location and velocity is: vel = ",velStart,"x =",xStart,"y =",yStart,"z =",zStart);
		}
	} // End Set_Start

	Execute_A:
	{
		Boolean Fly2A_Success;
		PostCondition Command_Fly2A.outcome == SUCCESS;
		
		pprint("Execute A"); //debug
		
		// Set the location of waypoint A
		Set_WaypointA:
		{
			Boolean WaypointSet;
			PostCondition WaypointSet;
			
			pprint("Set_WaypointA"); //debug
		
			// Sends the location of WP A to the simulator to update
			UpdateWaypoint("UpdateWaypoint", xWaypoint_A, yWaypoint_A, zWaypoint_A, "A");
			pprint("Waypoint A is located at: x =",xWaypoint_A,"y =",yWaypoint_A,"z =",zWaypoint_A);
		} // End Set_Waypoint
		
		// Command the A/C to fly to WP A (sends to Fly2WP.ple)
		Command_Fly2A:
		{
			StartCondition Set_WaypointA.state == FINISHED;
			PostCondition Fly2A_Success;
			
			//SynchronousCommand Fly2A_Success = Fly2A();
			Fly2A();
		} // End Command_Fly2A
		
		if Fly2A_Success
		{
			pprint("Successfully arrived at A and Science has been performed");
			A_Complete = true; // Successfully flown to WP A
		} // End if
		else
		{
			pprint("Flight to A has FAILED");
		} // End else
		endif
		
	} // End Execute_A

	Execute_B:
	{
		Boolean Fly2B_Success;
		PostCondition Command_Fly2B.outcome == SUCCESS;
		
		// Set the location of WP B
		Set_WaypointB:
		{
			Boolean WaypointSet;
			PostCondition WaypointSet;
			
			// Sends location of WP B to simulator to update
			UpdateWaypoint("UpdateWaypoint", xWaypoint_B, yWaypoint_B, zWaypoint_B, "B");
			pprint("Waypoint B is located at: x =",xWaypoint_B,"y =",yWaypoint_B,"z =",zWaypoint_B);
		} // End Set_Waypoint
		
		// Command the A/C to fly to WP B (sends to Fly2WP.ple)
		Command_Fly2B:
		{
			StartCondition Set_WaypointB.state == FINISHED;
			PostCondition Fly2B_Success;
			
			//SynchronousCommand Fly2B_Success = Fly2B();
			Fly2B();
		} // End Command_Fly2B
		
		if Fly2B_Success
		{
			pprint("Successfully arrived at B and Science has been performed");
			B_Complete = true; // Successfully flown to WP B
		} // End if
		else
		{
			pprint("Flight to B has FAILED");
		} // End else
		endif

	} // End Execute_B

} // End WaypointPlan
