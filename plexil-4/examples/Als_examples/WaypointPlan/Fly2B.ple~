///////////////////////////////////////////////////////////////////////////////////////
//
//  README
//
//  Name: Fly2B.ple
//  By: Alec Forsman - Red Canyon Software
//  Created: 1/9/16
//  Updated: 1/9/16
//
//  Description:
//		This is the plan for the 'Flying to B' senario for a simulation of 
//		an aircraft flying to specified waypoints and performing science 
//		operations. This is currently only set up to run with the simulator
//		'Fly2B_Simulator.plx'. Also set up so that B is a straight line from waypoint A.
//
//	Updates:
//		1/9/16
//			- Created - copied from Fly2A.ple
//			- Created conf file
//			- Changed A logic to B
//
///////////////////////////////////////////////////////////////////////////////////////

// Lookup variables
Real Lookup vel;
Real Lookup xLoc;
Real Lookup yLoc;
Real Lookup zLoc;
Integer Lookup yTarget;
// Commands emulating those sent to CoreFlight
Command TakePic(); // Command 1
Command UpdatePlan(); // Command 2
Boolean Command GetParams(Real w, Real x, Real y, Real z); // Command 3
Command UpdateFlight(Integer, Integer, Integer, Integer); // Command 4
Boolean Command ActivateScience(); // Command 5
// Commands used to communicate with simulator
Command SendMessage (...);
Command PlanComplete();
// Standard plexil commands
Command pprint (...);

Fly2A: OnCommand "Fly2B"
{
	Boolean At_B = false;
	// Get these coordinates through WaypointPlan.plx if possible
	Real xWaypoint = 10; // Waypoint B x Coordinate
	Real yWaypoint = 10; // Waypoint B y Coordinate
	Real zWaypoint = 5; // Waypoint B z Coordinate
	
	pprint("######################## Initialize Plan ###############################");
	pprint("Starting flight to Waypoint B");
	pprint("Waypoint B is at x =",xWaypoint,"y =",yWaypoint,"z =",zWaypoint); 
	
	Not_at_B:
	{
		StartCondition !At_B;
		RepeatCondition !At_B;
		
		pprint("#########################################################################");
		pprint("Not at Waypoint B");
		pprint("Currently at x =",Lookup(xLoc),"y =",Lookup(yLoc),"z =",Lookup(zLoc));
		
		ExecuteGetParams:
		{
			Real velocity;
			Real xLocation;
			Real yLocation;
			Real zLocation;
			
			// Lookups assigned to variables because I'm not sure how to pass lookups using synchronous command
			// This is a non issued when not using the simulator.
			velocity = Lookup(vel);
			xLocation = Lookup(xLoc);
			yLocation = Lookup(yLoc);
			zLocation = Lookup(zLoc);
	
			GetParams:
			{
				Boolean GetParamsSuccess;
				//StartCondition !At_B;
				//RepeatCondition !At_B;
				//EndCondition At_B;
				//ExitCondition GetParamsSuccess;
				PostCondition GetParamsSuccess;
			
				pprint(" ");
				pprint("Entering GetParams");
				
				SynchronousCommand GetParamsSuccess = GetParams(velocity, xLocation, yLocation, zLocation);
								
				if GetParamsSuccess
				{
					pprint("Parameters successfully obtained");
					pprint("Parameters received: vel =",Lookup(vel),"x =",Lookup(xLoc),"y =",Lookup(yLoc),"z =",Lookup(zLoc));
				} // end if
				else
				{
					pprint("Obtaining parameters FAILED!!!");
				} // end else
				endif
							
			} // End GetParams
			
			CheckLocation: Concurrence
			{
								
				EnRoute_to_B:
				{
					StartCondition (xWaypoint - Lookup(xLoc)) > 1 || (yWaypoint - Lookup(yLoc)) > 1 || (zWaypoint - Lookup(zLoc)) > 1;
					SkipCondition (xWaypoint - Lookup(xLoc)) <= 1 && (yWaypoint - Lookup(yLoc)) <= 1 && (zWaypoint - Lookup(zLoc)) <= 1;
				
					pprint("Flight Status: Maintaing Route to B");
				
				} // end EnRoute_to_B
			
				Arriving_at_B:
				{
					Boolean ScienceActivated;
					StartCondition (xWaypoint - Lookup(xLoc)) <= 1 && (yWaypoint - Lookup(yLoc)) <= 1 && (zWaypoint - Lookup(zLoc)) <= 1;
					SkipCondition (xWaypoint - Lookup(xLoc)) > 1 || (yWaypoint - Lookup(yLoc)) > 1 || (zWaypoint - Lookup(zLoc)) > 1 || ((xWaypoint - Lookup(xLoc)) == 0 && (yWaypoint - Lookup(yLoc)) == 0 && (zWaypoint - Lookup(zLoc)) == 0);
					PostCondition ScienceActivated;
	
					pprint("Flight Status: Arriving at B");
					pprint("Activating science");
					SynchronousCommand ScienceActivated = ActivateScience();
	
					if ScienceActivated
					{
						pprint("Science successfully activated");
					} // end if
					else
					{
						pprint("Science activation FAILED!!!");
					} // end else
					endif

				} // end Arriving_at_B
						
				Arrived_at_B:
				{
					StartCondition Lookup(xLoc) == xWaypoint && Lookup(yLoc) == yWaypoint && Lookup(zLoc) == zWaypoint;
					SkipCondition Lookup(xLoc) != xWaypoint || Lookup(yLoc) != yWaypoint || Lookup(zLoc) != zWaypoint;
					EndCondition At_B;
			
					At_B = true;
			
				} // end Arrived_at_B
		
			} // end CheckLocation
			
		} // end ExecuteGetParams
		
		MonitorParams:
		{
			// Expected parameter values
			Real xTarget = 10; 
			// Real yTarget = 0; // needs to be updated
			Real zTarget = 5;
			Real velTarget = 1;
			// Actual parameter values
			Real velState;
			Real xState;
			Real yState;
			Real zState;
			// Update parameter values
			Integer velFlag;
			Integer xFlag;
			Integer yFlag;
			Integer zFlag;
			SkipCondition At_B;
			
			pprint(" ");
			pprint("Entering MonitorParams");
		
			Velocity:
			{
				PreCondition isKnown(velTarget);
				PostCondition isKnown(velFlag);
				
				pprint("Determining velocity update");
				
				velState = Lookup(vel) - velTarget; // add tolerance logic
				
				if velState < 0
				{
					velFlag = 1; // Increase velocity
				} // End if
				elseif velState > 0
				{
					velFlag = -1; // Decrease velocity
				} // end elseif
				else
				{
					velFlag = 0; // Maintain velocity
				} // end else
				endif
			
			} // End Velocity
			
			Location:
			{
				StartCondition Velocity.state == FINISHED;
				PreCondition isKnown(Lookup(xTarget)) && isKnown(yTarget) && isKnown(zTarget);
				PostCondition isKnown(xFlag) && isKnown(yFlag) && isKnown(zFlag);
				
				xState = Lookup(xLoc) - xTarget; // add tolerance logic
				yState = Lookup(yLoc) - Lookup(yTarget); // add tolerance logic
				zState = Lookup(zLoc) - zTarget; // add tolerance logic
				
				xLocation:
				{
				
					pprint("Determining x coordinate update");
				
					if xState < 0
					{
						xFlag = 1; // Increase xLoc
					} // end if
					elseif xState > 0
					{
						xFlag = -1; // Decrease xLoc
					} // end elseif
					else
					{
						xFlag = 0; // Maintain xLoc
					} // end else
					endif
				} // end xLocation
	
				yLocation:
				{
					StartCondition xLocation.state == FINISHED;
				
					pprint("Determining y coordinate update");
				
					if yState < 0
					{
						yFlag = 1; // Increase xLoc
					} // end if
					elseif yState > 0
					{
						yFlag = -1; // Decrease xLoc
					} // end elseif
					else
					{
						yFlag = 0; // Maintain xLoc
					} // end else
					endif
				} // end yLocation

				zLocation:
				{
					StartCondition yLocation.state == FINISHED;
				
					pprint("Determining z coordinate update");
				
					if zState < 0
					{
						zFlag = 1; // Increase xLoc
					} // end if
					elseif zState > 0
					{
						zFlag = -1; // Decrease xLoc
					} // end elseif
					else
					{
						zFlag = 0; // Maintain xLoc
					} // end else
					endif
				} // end zLocation
				
				pprint("Updating Flight Parameters: velFlag =",velFlag,"xFlag =",xFlag,"yFlag =",yFlag,"zFlag =",zFlag);
				UpdateFlight(velFlag, xFlag, yFlag, zFlag);
		
			} // End Location
		
		} // End MonitorParams
	
	} // End Not_at_B
	
	Arrived_at_B:
	{
		StartCondition At_B;
		//PreCondition Not_at_B.state == FINISHED; // This doesn't work, could change to outcome -> success
		
		pprint("Flight Status: Arrived at B!");
		
		PerformScience:
		{
			Boolean PicTaken;			
			PostCondition PicTaken; // Science Successful
			
			pprint(" ");
			pprint("Performing Science");
			
			SynchronousCommand PicTaken = TakePic();			
			if PicTaken
			{
				pprint("Science successful");
			} // end if
			else
			{
				pprint("Science FAILED!!!");
			} // end else
			endif
		
		} // End Perform Science
		
		UpdatePlan:
		{
			Boolean PlanUpdated;		
			PostCondition PlanUpdated;
			
			pprint(" ");
			pprint("Updating Waypoint Plan");
			
			SynchronousCommand PlanUpdated = UpdatePlan();
			if PlanUpdated
			{
				pprint("Plan updated successfully");
				pprint(" ");
				PlanComplete();
			} // end if
			else
			{
				pprint("Plan update FAILED!!!");
				pprint(" ");
			} // end else
			endif
		
		} // End UpdatePlan
	
	} // End Arrived_at_B

} // End Fly2B
