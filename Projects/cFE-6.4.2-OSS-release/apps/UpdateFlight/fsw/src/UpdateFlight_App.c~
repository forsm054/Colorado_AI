/////////////////////////////////////////////////////////////////////////
//
//  README
//
//  Name: UpdateFlight_App.c
//  By: Alec Forsman - Red Canyon Software
//  Created: 5/12/16
//  Updated: 5/12/16
//
//  Description:
//		This is a Core Flight Application intended to model the UpdateFlight commands in the PLEXIL
//	  Waypoint plan. The app simply creates a pipe to receive messages, and when
//		a message is received it will perform the corresponding neccessary functions and send data
//		back so PLEXIL can continue to update the flight. This can be used in the future as the
//		layout for communication between PLEXIL and CFE.
//
//	Updates:
//		5/12/16
//			- Created
//			- Created SB pipe to receive commands from TestUdp_app.c
//
//	Issues/ToDo:
//		- Interface with PLEXIL
//		- Setup to perform neccessary calculations
//		- Send data back to TestUdp_app.c
//		- Get app to receive real data
//		- Combine Command Pack structure and Command structure. Shouldn't need both
//		- clean up
//		- Implement error checks
//		- NOTE: If app doesn't run, 90% of the time its an issue with the code(will still happen if it compiles)
//
/////////////////////////////////////////////////////////////////////////


#include "UpdateFlight_App.h"
#include "UpdateFlight_Events.h"
#include "UpdateFlight_Msgids.h"

UpdateFlight_AppData_t	UpdateFlight_AppData;

static CFE_EVS_BinFilter_t UpdateFlight_EventFilters[] = 
	{
		{DEBUG,										0x0000},
	};		
		

// Main Function
void UpdateFlight_AppMain(void)
{
	uint32 Status;

	CFE_ES_RegisterApp(); // Register app w/ CFE
	UpdateFlight_init(); // initialize the app. Sets up needed params (Success returns CFE_SUCCESS)
/*	
	// UpdateFlight Run Loop
	while(CFE_ES_RunLoop(&UpdateFlight_AppData.RunStatus) == TRUE)
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"Run loop entered, Run Status: %d", &UpdateFlight_AppData.RunStatus);	
	
		Status = CFE_SB_RcvMsg(&UpdateFlight_AppData.MsgPtr, UpdateFlight_AppData.UpdateFlightPipe, CFE_SB_PEND_FOREVER);
		//CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"Message Received");
		
		//TlmStatus = Send_Telemetry();
		if (Status == CFE_SUCCESS);
		{
			CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"UPDATEFLIGHT MESSAGE RECEIVED!!!");
			CFE_ES_ExitApp(UpdateFlight_AppData.RunStatus);
		}
		
	} // End while
*/
} // End UpdateFlight_AppMain


//////////////////////////////////////////////////////////////////////////////////////////////////////

void UpdateFlight_init(void)
{
	int status;
	//uint16 i;
	//char TlmPipeName[16];
	//uint16 TlmPipeDepth;
/*	
	CFE_EVS_Register(UpdateFlight_EventFilters, sizeof(UpdateFlight_EventFilters)/sizeof(CFE_EVS_BinFilter_t), CFE_EVS_BINARY_FILTER); // Register Event filter table so events can be output
	
	UpdateFlight_AppData.RunStatus = CFE_ES_APP_RUN;
	
	UpdateFlight_AppData.PipeDepth = UPDATEFLIGHT_PIPE_DEPTH;
	strcpy(UpdateFlight_AppData.PipeName, "UPDATEFLIGHT_PIPE");	
	
	// Create Receive (command) pipe
	status = CFE_SB_CreatePipe(&UpdateFlight_AppData.UpdateFlightPipe, UpdateFlight_AppData.PipeDepth, UpdateFlight_AppData.PipeName);
	if(status != CFE_SUCCESS)
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_ERROR,"Failed to create UpdateFlight pipe");
	}
	
	// Subscribe
	status = CFE_SB_Subscribe(UPDATEFLIGHT_MID, UpdateFlight_AppData.UpdateFlightPipe);
	if(status != CFE_SUCCESS)
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_ERROR,"Failed to subscribe to UpdateFlight pipe");
		//return(status);
	}
	
	//CFE_SB_InitMsg(&UpdateFlight_AppData.UpdateFlightPacket, UPDATEFLIGHT_MID, sizeof(UpdateFlight_UpdateFlightPacket_t), TRUE);
	
	
	CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"UpdateFlight App Initialized");
	
	*/
} // End UpdateFlight_init




