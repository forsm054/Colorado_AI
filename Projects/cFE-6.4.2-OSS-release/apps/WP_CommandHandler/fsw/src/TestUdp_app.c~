/////////////////////////////////////////////////////////////////////////
//
//  README
//
//  Name: TestUdp_app.c
//  By: Alec Forsman - Red Canyon Software
//  Created: 3/7/16
//  Updated: 5/12/16
//
//  Description:
//		This is a Core Flight Application intended to help get familiar with
//		the syntax. The apply receives a UDP packet(command), and depending on the command, the
//		The command handler sends a SB message so the corresponding app can perform the command.
//	  This can be used in the future as the layout for communication between PLEXIL and CFE.
//
//	Updates:
//		3/7/16
//			- Created main function and header file
//		3/11/16
//			- Added Send Telemetry function
//		3/12/16
//			- Implemented the basic syntax, mainly the init app section, by following
//				example in Developers Guide
//			- Got to successfully compile and send a UDP packet to a socket
//			- Started implementing receive pipe
//		3/14/16
//			- Implemented command pipe
//			- Implemented logic to set up a response when command received
//		3/15/16
//			- Created Event Service table and registered it. (This got the app to work!)
//		5/12/16
//			- Successfully got app to receive UDP packets
//			- Setup Command_Handler to handle GetParams command from PLEXIL
//			- Successfully passed commands to SB bus and got it to receive in another app
//			- Removed Telemetery function. Not needed.
//
//	Issues/ToDo:
//		- Interface with PLEXIL
//		- Setup Command_handler for other commands
//		- Setup Command_handler to pass real data
//		- Housekeeping data?
//		- clean up
//		- Implement error checks
//		- Better naming convention for pipes?
//		- NOTE: If app doesn't run, 90% of the time its an issue with the code(will still happen if it compiles)
//
/////////////////////////////////////////////////////////////////////////

#include "TestUdp_app.h"
#include "TestUdp_msg.h"
#include "TestUdp_perfids.h"
#include "TestUdp_events.h"
#include "TestUdp_msgids.h"

// Global
TestUdp_AppData_t	TestUdp_AppData; // App data structure
int Recv_SocketID;
bool SocketConnected;

static CFE_EVS_BinFilter_t TestUdp_EventFilters[] = 
	{
		{CREATE_TLM_SOCK_ERR,			0x0000},	
		{SEND_TLM_SOCK_ERR,				0x0000},
		{CREATE_RECV_PIPE_ERR,		0x0000},
		{CREATE_RECV_SOCK_ERR,		0x0000},
		{RECV_MSG_ERR,						0x0000},
		{BIND_RECV_SOCK_ERR,			0x0000},
		{TESTUDP_INITIALIZED_EID,	0x0000},
		{TEST_OUT,								0x0000},
		{DEBUG,										0x0000},
	};		
		

// Main Function
void TestUdp_AppMain(void)
{
	uint32 Status;
	uint32 CmdStatus;

	CFE_ES_RegisterApp(); // Register app w/ CFE
	TestUdp_init(); // initialize the app. Sets up needed params (Success returns CFE_SUCCESS)
	
	CFE_ES_PerfLogEntry(TESTUDP_MAIN_TASK_PERF_ID);
	
	// TestUdp Run Loop
	while(CFE_ES_RunLoop(&TestUdp_AppData.RunStatus) == TRUE)
	{
		sleep(3);
		CFE_ES_PerfLogExit(TESTUDP_MAIN_TASK_PERF_ID);
		
		CFE_ES_PerfLogEntry(TESTUDP_MAIN_TASK_PERF_ID);
		
		if(SocketConnected)
		{
			CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION, "ProcessUDP");
			ProcessUDP();
			CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"End ProcessUDP, Run Status: %d", &TestUdp_AppData.RunStatus);	
		}
		
	} // End while
	
} // End TestUdp_AppMain

//////////////////////////////////////////////////////////////////////////////////////////////////////

void TestUdp_init(void)
{
	int status;
	
	CFE_EVS_Register(TestUdp_EventFilters, sizeof(TestUdp_EventFilters)/sizeof(CFE_EVS_BinFilter_t), CFE_EVS_BINARY_FILTER); // Register Event filter table so events can be output
	
	TestUdp_AppData.RunStatus = CFE_ES_APP_RUN;
	
	// GetParams Message
	CFE_SB_InitMsg(&TestUdp_AppData.GetParamsPacket, TESTAPP_GETPARAMS_MID, sizeof(TestUdp_GetParamsPacket_t), TRUE);
	
	// ActivateScience Message
	CFE_SB_InitMsg(&TestUdp_AppData.ActivateSciencePacket, TESTAPP_ACTIVATESCIENCE_MID, sizeof(TestUdp_ActivateSciencePacket_t), TRUE);
	
	// UpdateFlight Message
	CFE_SB_InitMsg(&TestUdp_AppData.UpdateFlightPacket, TESTAPP_UPDATEFLIGHT_MID, sizeof(TestUdp_UpdateFlightPacket_t), TRUE);
	
	// TakePic Message
	CFE_SB_InitMsg(&TestUdp_AppData.TakePicPacket, TESTAPP_TAKEPIC_MID, sizeof(TestUdp_TakePicPacket_t), TRUE);
	
	Create_Recv_Socket();
	
	CFE_EVS_SendEvent(TESTUDP_INITIALIZED_EID, CFE_EVS_INFORMATION,"TestUdp App Initialized");
	
} // End TestUdp_init

//////////////////////////////////////////////////////////////////////////////////////////////////////

void Create_Recv_Socket(void)
{
	struct sockaddr_in sin_me;
	
	CFE_EVS_SendEvent(TESTUDP_INITIALIZED_EID, CFE_EVS_INFORMATION,"Create_Recv_Socket");
	
	if((Recv_SocketID = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
	{
		CFE_EVS_SendEvent(CREATE_RECV_SOCK_ERR,CFE_EVS_ERROR,"Failed to create receive socket");
		CFE_EVS_SendEvent(CREATE_RECV_SOCK_ERR,CFE_EVS_INFORMATION,"Failed to create receive socket");
	}
	else
	{
		memset((char *) &sin_me, 0, sizeof(sin_me));
		sin_me.sin_family = AF_INET;
		sin_me.sin_port = htons(RECV_PORT);
		sin_me.sin_addr.s_addr = htonl(INADDR_ANY);
		
		if(bind(Recv_SocketID, (struct sockaddr*)&sin_me, sizeof(sin_me)) < 0)
		{
			CFE_EVS_SendEvent(BIND_RECV_SOCK_ERR,CFE_EVS_INFORMATION,"Failed to bind to port");
		}
		else
		{
			SocketConnected = true;
		}
	}
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////


void ProcessUDP(void)
{
	CFE_EVS_SendEvent(TESTUDP_INITIALIZED_EID, CFE_EVS_INFORMATION,"ProcessCommand_1");

	struct sockaddr_in sin_other;
	int slen = sizeof(sin_other);
	
	Command *recv_data = malloc(sizeof(Command));
	memset(recv_data, '\0', sizeof(Command));
	
	if(recvfrom(Recv_SocketID, recv_data, sizeof(*recv_data), MSG_DONTWAIT, (struct sockaddr *) &sin_other, &slen) < 0)
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"Couldn't receive packet/No packet to receive"); //should be error
	}
	else
	{
		Command_Handler(recv_data->Name);
	}
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

void Command_Handler(char *command_name)
{
	
	if(strcmp(command_name,"GetParams") == 0)
	{
		CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"GetParams command");
		CFE_SB_SendMsg((CFE_SB_Msg_t *) &TestUdp_AppData.GetParamsPacket);
	}
	else if(strcmp(command_name,"ActivateScience") == 0)
	{
		CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"ActivateScience command");
		CFE_SB_SendMsg((CFE_SB_Msg_t *) &TestUdp_AppData.ActivateSciencePacket);
	}
	else if(strcmp(command_name,"UpdateFlight") == 0)
	{
		CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"UpdateFlight command");
		CFE_SB_SendMsg((CFE_SB_Msg_t *) &TestUdp_AppData.UpdateFlightPacket);
	}
	else if(strcmp(command_name,"TakePic") == 0)
	{
		CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"TakePic command");
		CFE_SB_SendMsg((CFE_SB_Msg_t *) &TestUdp_AppData.TakePicPacket);
	}
	else
	{
		CFE_EVS_SendEvent(TESTUDP_INITIALIZED_EID, CFE_EVS_INFORMATION,"Invalid Message");
	}
	
}










