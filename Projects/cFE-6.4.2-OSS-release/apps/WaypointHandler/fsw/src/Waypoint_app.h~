#ifndef _CFE_TestUDP_h
#define _CFE_TestUDP_h

#include "network_includes.h"

// CoreFlight includes
#include "cfe_error.h"
#include "cfe_sb.h"
#include "cfe_time.h"
#include "cfe_evs.h"
#include "cfe_sb.h"
#include "cfe_es.h"

// C includes
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <stdbool.h>

// OSAL includes
#include "common_types.h"
#include "osapi.h"

#define TLM_ADDR "127.0.0.1"
#define TLM_PORT 8034
//#define RECV_ADDR "127.0.0.1"
#define RECV_PORT 1234
#define BUFLEN 514
#define TESTUDP_PIPE_DEPTH 10
#define ARRAY_SIZE 100

typedef struct
{
	char Name[ARRAY_SIZE];
	double Args[ARRAY_SIZE];
	int NumArgs;
} Command;

typedef struct // GetParams data structure
{

	uint8 TlmHeader[CFE_SB_CMD_HDR_SIZE];
	
	uint8 CmdCounter;
	uint8 ErrCounter;

} TestUdp_GetParamsPacket_t;

typedef struct // ActivateScience data structure
{

	uint8 TlmHeader[CFE_SB_CMD_HDR_SIZE];
	
	uint8 CmdCounter;
	uint8 ErrCounter;

} TestUdp_ActivateSciencePacket_t;

typedef struct // UpdateFlight data structure
{

	uint8 TlmHeader[CFE_SB_CMD_HDR_SIZE];
	
	uint8 CmdCounter;
	uint8 ErrCounter;

} TestUdp_UpdateFlightPacket_t;

typedef struct // TakePic data structure
{

	uint8 TlmHeader[CFE_SB_CMD_HDR_SIZE];
	
	uint8 CmdCounter;
	uint8 ErrCounter;

} TestUdp_TakePicPacket_t;

typedef struct
{
	// Command interface counters
	uint8 CmdCounter;
	uint8 ErrCounter;
	
	TestUdp_GetParamsPacket_t 				GetParamsPacket;
	TestUdp_ActivateSciencePacket_t 	ActivateSciencePacket;
	TestUdp_UpdateFlightPacket_t 			UpdateFlightPacket;
	TestUdp_TakePicPacket_t 					TakePicPacket;
	
	CFE_SB_PipeId_t GetParamsPipe;
	CFE_SB_PipeId_t ActivateSciencePipe;
	CFE_SB_PipeId_t UpdateFlightPipe;
	CFE_SB_PipeId_t TakePicPipe;
	
	
	// App status
	uint32 RunStatus;
	
	// Pipe Data
	char PipeName[16];
	uint16 PipeDepth;
	
} TestUdp_AppData_t;


// Function Definitions
void TestUdp_AppMain(void);
void TestUdp_init(void);
void Create_Recv_Socket(void);
void ProcessUDP(void);
void Command_Handler(char *);



#endif
