/////////////////////////////////////////////////////////////////////////
//
//  README
//
//  Name: TlmHandler_App.c
//  By: Alec Forsman - Red Canyon Software
//  Created: 3/7/16
//  Updated: 5/12/16
//
//  Description:
//		This is a Core Flight Application intended to help get familiar with
//		the syntax. The apply receives a UDP packet(command), and depending on the command, the
//		The command handler sends a SB message so the corresponding app can perform the command.
//	  This can be used in the future as the layout for communication between PLEXIL and CFE.
//
//	Updates:
//		3/7/16
//			- Created main function and header file
//		3/11/16
//			- Added Send Telemetry function
//		3/12/16
//			- Implemented the basic syntax, mainly the init app section, by following
//				example in Developers Guide
//			- Got to successfully compile and send a UDP packet to a socket
//			- Started implementing receive pipe
//		3/14/16
//			- Implemented command pipe
//			- Implemented logic to set up a response when command received
//		3/15/16
//			- Created Event Service table and registered it. (This got the app to work!)
//		5/12/16
//			- Successfully got app to receive UDP packets
//			- Setup Command_Handler to handle GetParams command from PLEXIL
//			- Successfully passed commands to SB bus and got it to receive in another app
//			- Removed Telemetery function. Not needed.
//		5/13/16
//			- Improved naming conventions
//			- Got all apps to be able to receive a SB message.
//			- Got interface to PLEXIL working
//		5/18/16
//			- Created function to get initial conditions. Reading these from .txt caused app to crash. Going to try a Table.
//			- created InitTable, which has the initial A/C state and waypoint locations.
//		5/26/16
//			- Able to get data throught SB msg but when extracting, the buffer is offset for some reason.
//		5/30/16
//			- fixed offset issue. Sender has data header in struct, but receiver shouldn't.
//		6/26/16
//			- Added plot logic
//
//	Issues/ToDo:
//		- Setup Command_handler for other commands
//		- Plot data for viualization
//		- Housekeeping data?
//		- Write function descriptions
//		- clean up
//		- Return handler should be separate app
//		- Implement error checks
//		- NOTE: If app doesn't run, 90% of the time its an issue with the code(will still happen if it compiles)
//
/////////////////////////////////////////////////////////////////////////

#include "TlmHandler_App.h"
#include "TlmHandler_Msg.h"
#include "TlmHandler_Perfids.h"
#include "TlmHandler_Events.h"
#include "TlmHandler_Msgids.h"

// Global
TlmHandler_AppData_t	TlmHandler_AppData; // App data structure
int Tlm_SocketID;
bool SocketConnected;
//char pathFile[100];
//char * directory = "/home/al/Desktop";
//char * LogStateFile = "WP_State.txt";

static CFE_EVS_BinFilter_t TlmHandler_EventFilters[] = 
	{
		{DEBUG,											0x0000},
	};		
		

// Main Function
void TlmHandler_AppMain(void)
{
	int Status;

	CFE_ES_RegisterApp(); // Register app w/ CFE
	TlmHandler_init(); // initialize the app. Sets up needed params (Success returns CFE_SUCCESS)
	
	CFE_ES_PerfLogEntry(TLMHANDLER_MAIN_TASK_PERF_ID);
	
	// TlmHandler Run Loop
	while(CFE_ES_RunLoop(&TlmHandler_AppData.RunStatus) == TRUE)
	{
		sleep(1);

		Status = CFE_SB_RcvMsg(&TlmHandler_AppData.MsgPtr, TlmHandler_AppData.TelemetryPipe, CFE_SB_POLL);
		if(Status == CFE_SUCCESS)
		{
			CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"Return Command Received");
			Return_Handler(TlmHandler_AppData.MsgPtr);
		}
		
	} // End while
	
} // End TlmHandler_AppMain

//////////////////////////////////////////////////////////////////////////////////////////////////////

void TlmHandler_init(void)
{
	int status, status_A, status_B;
	
	status = CFE_EVS_Register(TlmHandler_EventFilters, sizeof(TlmHandler_EventFilters)/sizeof(CFE_EVS_BinFilter_t), CFE_EVS_BINARY_FILTER); // Register Event filter table so events can be output
	if(status == !CFE_SUCCESS)
	{
		CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"Failed to register event filter"); //debug
	}
	
	TlmHandler_AppData.RunStatus = CFE_ES_APP_RUN;
	
	// Create Return Pipe
	TlmHandler_AppData.PipeDepth = TLMHANDLER_PIPE_DEPTH;
	strcpy(TlmHandler_AppData.PipeName, "TELEMETRY_PIPE");
	status = CFE_SB_CreatePipe(&TlmHandler_AppData.TelemetryPipe, TlmHandler_AppData.PipeDepth, TlmHandler_AppData.PipeName);
	if(status != CFE_SUCCESS)
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_ERROR,"Failed to create Return pipe");
	}
	
	status_A = CFE_SB_Subscribe(FLY2A_RETURN_MID, TlmHandler_AppData.TelemetryPipe);
	status_B = CFE_SB_Subscribe(FLY2B_RETURN_MID, TlmHandler_AppData.TelemetryPipe);
	if(status_A != CFE_SUCCESS) // should have individual error check for each subscribe
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_ERROR,"Failed to subscribe A to Telemetry pipe");
	}
	else if(status_B != CFE_SUCCESS) // should have individual error check for each subscribe
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_ERROR,"Failed to subscribe B to Telemetry pipe");
	}
	
	//Create_Tlm_Socket();
	
	//char pathFile[100];
	//char* directory;
	//directory = "/home/al/Desktop";
	//sprintf(pathFile, "%s/%s", directory, LogStateFile);
	
	//FILE *fp = fopen(pathFile, "w");
	//fclose(fp);
	
	CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"TlmHandler App Initialized");
	
} // End TlmHandler_init

//////////////////////////////////////////////////////////////////////////////////////////////////////

/*
void Create_Tlm_Socket(void)
{
	struct sockaddr_in sin_me;
	
	CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"Create_Tlm_Socket");
	
	if((Tlm_SocketID = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
	{
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_ERROR,"Failed to create receive socket");
		CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"Failed to create receive socket");
	}
	else
	{
		bzero((char *) &sin_me, sizeof(sin_me));
		sin_me.sin_family = AF_INET;
		sin_me.sin_port = htons(TLM_PORT);
		sin_me.sin_addr.s_addr = htonl(INADDR_ANY);
		
		if(bind(Tlm_SocketID, (struct sockaddr*)&sin_me, sizeof(sin_me)) < 0)
		{
			CFE_EVS_SendEvent(DEBUG,CFE_EVS_INFORMATION,"Failed to bind to port");
		}
		else
		{
			SocketConnected = true;
		}
	}
	
}
*/


//////////////////////////////////////////////////////////////////////////////////////////////////////

void Return_Handler(CFE_SB_MsgPtr_t msg)
{
	//uint16 CommandCode = CFE_SB_GetCmdCode(msg);
	CFE_SB_MsgId_t MessageID = CFE_SB_GetMsgId(msg);
	
	printf("MessageID = %d \n", MessageID);
	//printf("GetIC Message ID = %d \n", WP_GETIC_RETURN_MID);
	
	CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"Return_Handler entered");
	
	TlmHandler_BusPacket_t *BusPacket_temp = (TlmHandler_BusPacket_t *)msg;
	
	printf("%s, %d, %d \n",BusPacket_temp->cmd, BusPacket_temp->Success, BusPacket_temp->poop);
	
	switch(MessageID)
	{
		case FLY2A_RETURN_MID:
				CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"Fly2A return command received");
				TlmHandler_AppData.Fly2A_Packet = *BusPacket_temp;
				SendReturn2Plexil(TlmHandler_AppData.Fly2A_Packet);
				//LogState(TlmHandler_AppData.Fly2A_Packet);
				break;
		
		case FLY2B_RETURN_MID:
				CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"Fly2B return command received");
				TlmHandler_AppData.Fly2B_Packet = *BusPacket_temp;
				SendReturn2Plexil(TlmHandler_AppData.Fly2B_Packet);
				//LogState(TlmHandler_AppData.Fly2B_Packet);
				break;
				
		default:
				CFE_EVS_SendEvent(DEBUG, CFE_EVS_INFORMATION,"INVALID return command received");
				break;
	}
	// FIXME: Error check from return value of SendReturn2Plexil
	 
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

int SendReturn2Plexil(TlmHandler_BusPacket_t BusPacket)
{
	printf("Sending Return value to plexil \n");
	// Define variables used
	struct sockaddr_in sin_other; // socket structure
	int sockID, slen=sizeof(sin_other);
	
	// Set up socket
	if((sockID=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
	{
		perror("Socket"); // Error check
		return 0;
	}
	
	memset((char *) &sin_other, 0, sizeof(sin_other)); // Set socket struct to NULLs
	sin_other.sin_family = AF_INET; // local host
	sin_other.sin_port = htons(TLM_PORT); // Port to send over
	
	if(inet_aton(SERVER, &sin_other.sin_addr) == 0)
	{
		perror("inet_aton() failed\n"); // Error check
		return 0;
	}
	
	// send message
	if(sendto(sockID,(TlmHandler_BusPacket_t *)&BusPacket, sizeof(TlmHandler_BusPacket_t), 0, (struct sockaddr *) &sin_other, slen) < 0)
	{
		perror("Failed to send packet"); // Error Check
		return 0;
	}
	
	close(sockID);
	return 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

/*
int InitTableValidation(void *TblData)
{
	int Status = 0;
	
	WP_InitTable_t *InitTablePtr = (WP_InitTable_t *)TblData;
	
	// Dummy Checks
	// 1.) Check to make sure A/C starts at origin 
	if(InitTablePtr->xLoc != 0)
	{
		Status = -1; 
	}
	else if(InitTablePtr->yLoc != 0)
	{
		Status = -1; 
	}
	else if(InitTablePtr->zLoc != 0)
	{
		Status = -1; 
	}
	else
	{
		// Do Nothing
	}
	
	return Status;
}
*/


//////////////////////////////////////////////////////////////////////////////////////////////////////

/*
void LogState(TlmHandler_DataPacket_t State)
{
	
	//sprintf(pathFile, "%s/%s", directory, LogStateFile);
	
	//FILE *fp = fopen(pathFile, "a");

	//fprintf(fp, "%s, %d \n", State.cmd, State.Success);
	
	//fclose(fp);
	
}
*/

//////////////////////////////////////////////////////////////////////////////////////////////////////







